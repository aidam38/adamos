# interpreter for shell commands (needs to be POSIX compatible)
set shell bash
set shellopts '-eu'
set ifs "\n"
set scrolloff 7
set drawbox on
set dircounts
set color256
set info size
set findlen 2
set noanchorfind
set period 1
set previewer ~/.config/lf/prev.sh
set promptfmt " \[\033[38;5;166m\]%u\[\033[38;5;244m\]@\[\033[38;5;217m\]%h\[\033[38;5;15m\] \[\033[38;5;155;1m\]%w" 

# responsive columns
# %{{
    #w=$(tput cols)
    #if [ $w -le 80 ]; then
        #lf -remote "send $id set ratios 1:2"
    #elif [ $w -le 160 ]; then
        #lf -remote "send $id set ratios 1:2:3"
    #else
        #lf -remote "send $id set ratios 1:2:3:5"
    #fi
#}}

# make sure trash folder exists
%mkdir -p ~/.trash

# additional and command-line commands
#
# define a custom 'open' command
cmd open ${{
    case $(file --mime-type $f -L -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd fzy ${{
	lf -remote "send $id select $(fd --no-ignore --color=always --hidden --follow | fzy)"
	# selection=$(fzf | sed 's/ /\\ /g' | sed 's/\(.*\)\//\1:/')
	# lf -remote "send $id cd $(echo "$selection" | awk -F ":" '{print $1}')"
	# lf -remote "send $id select $(echo "$selection" | awk -F ":" '{print $2}')"
}}

# rename current file without overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv -f $fx ~/.trash

# delete current file or selected files (prompting)
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ $ans = "y" ] && rm -rf $fx
}}

cmd paste ${{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
	rsync -avh --ignore-existing --progress $list . \
	| stdbuf -i0 -o0 -e0 tr '\r' '\n' \
	| while read line; do
		echo "$line"
		lf -remote "send $id echo $line"
	done
    elif [ $mode = 'move' ]; then
        mv -n $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}

cmd paste-root &{{
    load=$(lf -remote 'load')
    mode=$(echo "$load" | sed -n '1p')
    list=$(echo "$load" | sed '1d')
    if [ $mode = 'copy' ]; then
	sudo rsync -avh --ignore-existing --progress $list . \
	| stdbuf -i0 -o0 -e0 tr '\r' '\n' \
	| while read line; do
		echo "$line"
		lf -remote "send $id echo $line"
	done
    elif [ $mode = 'move' ]; then
        mv -n $list .
    fi
    lf -remote 'send load'
    lf -remote 'send clear'
}}

cmd makecopy &{{
    echo -e "$fx" | while read item; do
	rsync -avh --progress $item $(echo "$item" | sed 's/\(.*\)\./\1_\./') \
	| stdbuf -i0 -o0 -e0 tr '\r' '\n' \
	| while read line; do
		echo "$line"
		lf -remote "send $id echo $line"
	done
    done 
}}

cmd symlink &{{
    load=$(lf -remote 'load')
    list=$(echo "$load" | sed '1d')
    echo -e "$list" | while read line; do
    	echo "$line"
        ln -s $line . && lf -remote "send $id echo Symlinked $lineto current directory." || lf -remote "send $id echo Failed to symlink file $line"
    done
    lf -remote 'send load'
    lf -remote 'send clear'
}}

cmd hardlink &{{
    load=$(lf -remote 'load')
    list=$(echo "$load" | sed '1d')
    echo -e "$list" | while read line; do
    	echo "$line"
        ln $line . && lf -remote "send $id echo Hardlinked $lineto current directory." || lf -remote "send $id echo Failed to hardlink file $line"
    done
    lf -remote 'send load'
    lf -remote 'send clear'
}}

cmd makearticle ${{
	mkdir "$1"
	cd "$1"
	cp /home/adam/scripts/example_article/example_article.tex ./"$1".tex
}}

cmd makebeamer ${{
	read name
	mkdir "$1"
	cd "$1"
	cp /home/adam/scripts/example_beamer/example_beamer.tex ./"$1".tex
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    rsync -avh --progress $fx $1
    # cp -r $fx $1
    tar czfv $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    rsync -avh --progress $fx $1
    # cp -r $fx $1
    zip -rv $1.zip $1
    rm -rf $1
}}



# my bindings

# basic
map ů read
map ú search
map J push <space>k
map K push <space>kk
map gj push G
map gk push gg
map <enter> open
map e $$EDITOR $f
map o fzy
map O fzf-new
map <a-w> q
map f $$SHELL
map F $st -e lf $f &
#$lf -remote "send $id select $(fd --no-ignore --color=always --hidden --follow | fzf)"
map p paste
map P paste-root
map Ls symlink
map Lh hardlink
map a $lf -remote "send $id push :rename<space>$(basename $f | sed 's/ /<space>/g')"
map c push :rename<space>
map <c-r> !bulkrename.sh "$fx"
map md push :$mkdir<space>
map mv push :$$EDITOR<space>
map ma makearticle
map mb makebeamer
map mx $lf -remote "send $id push :\$chmod<space>755<space>$f<left><left>"
map D trash
map <c-d> delete
map Z push zh
map t :set sortby time; set reverse
map T :set sortby natural; set reverse!
map <esc> clear; unselect
map <f-5> source /home/adam/.config/lf/lfrc; echo "Config loaded."
map i !stat $f ; du -sh $f ; mimetype $f 
# map i !stat $f
map I !du -sh $f
map x $$f
map X !$f
map Y makecopy
map Ee extract
map Et push :tar<space>
map Ez push :zip<space>

# command line bindings
cmap <esc> cmd-escape
cmap <tab> cmd-complete
cmap <enter> cmd-enter
cmap <c-j> cmd-history-next
cmap <c-k> cmd-history-prev
cmap <bs> cmd-delete-back
cmap <c-b> cmd-left
cmap <c-n> cmd-right
cmap <c-d> cmd-delete-unix-word
cmap <c-c> cmd-interrupt
cmap <c-w> cmd-word
cmap <c-b> cmd-word-back

# unmapping stuff
map w
map m

# directories aliases
map gst cd /home/adam/builds/st
map Cst :cd /home/adam/builds/st; $$EDITOR config.h
map gdwm cd /home/adam/builds/dwm
map Cdwm :cd /home/adam/builds/dwm; $$EDITOR config.h
map gv cd /home/adam/.config/nvim
map Cv :cd /home/adam/.config/nvim; $$EDITOR init.vim
map gK cd /home/adam/.config/kak
map Ck :cd /home/adam/.config/kak; $$EDITOR kakrc
map gq cd /home/adam/.config/qutebrowser
map Cq :cd /home/adam/.config/qutebrowser; $$EDITOR config.py
map gb cd /home/adam
map Cb :cd /home/adam; $$EDITOR .bashrc
map gx cd /home/adam
map Cx :cd /home/adam; $$EDITOR .xinitrc
map glf cd /home/adam/.config/lf
map Clf :cd /home/adam/.config/lf; $$EDITOR lfrc
map gmu cd /home/adam/.config/mutt
map Cmu :cd /home/adam/.config/mutt; $$EDITOR muttrc
map gal cd /home/adam/scripts
map Cal :cd /home/adam/scripts; $$EDITOR aliases
map gr cd /
map gse cd /var/service
map gsv cd /etc/sv/services
map gh cd /home/adam
map gc cd /home/adam/.config
map ge cd /etc
map gu1 cd /mnt/usb1
map gu2 cd /mnt/usb2
map gu3 cd /mnt/usb3
map gi cd /home/adam/.install
map Ci :cd /home/adam/.install; $$EDITOR programs
map gb cd /home/adam/builds
map gdo cd /home/adam/downloads
map gdr cd /home/adam/drive
map gsk cd /home/adam/drive/skola
map gsa cd /home/adam/drive/ostatni/skaut/2018-2019
map gan cd /home/adam/drive/skola/anki
map gsot cd /home/adam/soc/asteroidy_tex
map Csot :cd /home/adam/soc/asteroidy_tex; $$EDITOR asteroidy.tex
map gsof cd /home/adam/soc/swift_eunomia
map gM cd /home/adam/drive/skola/matika
map gmi cd /home/adam/drive/skola/matika/iKS/2018-2019
map gmk cd /home/adam/drive/skola/matika/krouzek/2018-2019/
map gmo cd /home/adam/drive/skola/matika/MO
map gmp cd /home/adam/drive/skola/matika/prase/2018-2019
map gms cd /home/adam/drive/skola/matika/sady
map gol cd /home/adam/drive/skola/olympiady
map gfo cd /home/adam/drive/skola/olympiady/FO/2018-2019
map gao cd /home/adam/drive/skola/olympiady/AO/2018-2019
map gsc cd /home/adam/scripts
map gů cd /home/adam/soc/swift_eunomia/eunomia_data/chi2
