# interpreter for shell commands (needs to be POSIX compatible)
set shell sh
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set drawbox on
set info size
set promptfmt " \[\033[38;5;166m\]%u\[\033[38;5;244m\]@\[\033[38;5;217m\]%h\[\033[38;5;15m\] \[\033[38;5;155;1m\]%w" 

# responsive columns
%{{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

# make sure trash folder exists
%mkdir -p ~/.trash

# additional and command-line commands
#
# define a custom 'open' command
cmd open ${{
    case $(file --mime-type $f -L -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# rename current file without overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv -f $fx ~/.trash

# delete current file or selected files (prompting)
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ $ans = "y" ] && rm -rf $fx
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# my bindings
# basic
map ů read
map ú search
map <enter> open
map r push :rename<space>
map md push :$mkdir<space>
map mv push :$nvim<space>
map e $$SHELL
map E &st
map o $mimeopen --ask $f
map O $mimeopen --ask-default $f
map D trash
map <c-d> delete
map J half-down
map K half-up
map t :set sortby time; set reverse
map T :set sortby natural; set reverse!
map C clear
map <f-5> reload
map i !stat $f

# execute current file (must be executable)
map x $$f
map X !$f

# unmapping stuff
map c
map w
map m

# directories aliases
map gr cd /
map ge cd /etc
map gM cd /mnt
map gu cd /mnt/usb1
map gh cd ~
map gd cd ~/downloads
map gB cd ~/builds
map gc cd ~/.scripts
map gD cd ~/drive
map gs cd ~/drive/School
map gS cd ~/drive/School/SOČ
map gm cd ~/drive/School/Matika
map gk cd ~/drive/School/Matika/Krouzek/2018-2019/
map gst cd ~/builds/st
map cst :cd ~/builds/st; $$EDITOR config.h
map gdwm cd ~/builds/dwm
map cdwm :cd ~/builds/dwm; $$EDITOR config.h
map gv cd ~/.config/nvim
map cv :cd ~/.config/nvim; $$EDITOR init.vim
map gq cd ~/.config/qutebrowser
map cq :cd ~/.config/qutebrowser; $$EDITOR config.py
map gb cd ~
map cb :cd ~; $$EDITOR .bashrc
map glf cd ~/.config/lf
map clf :cd ~/.config/lf; $$EDITOR lfrc
