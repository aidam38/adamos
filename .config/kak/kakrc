# Adam Křivka (aidam38) kakrc

# basic key bindings
map global normal ů :
map global normal ú /
map global normal <space> ,
map global user <space> <space>
map global normal X <a-x>
map global normal '#' :comment-line<ret>
map global normal R ":source ~/.config/kak/kakrc<ret>"
map global normal <a-space> "/<lt>\+\+<gt><ret>c"
map global insert <a-space> "<esc>/<lt>\+\+<gt><ret>c"

# clipboard managment
hook global NormalKey y|d|c %{ nop %sh{
      printf %s "$kak_main_reg_dquote" | xsel --input --clipboard
}}

map global user p '<a-!>xsel --output --clipboard<ret>'
map global user P '!xsel --output --clipboard<ret>'

map global user C ':w<ret>:terminal compile %val{buffile}<ret>'

# temporary binds
# map global user C ':exec ":nop %sh{ cd /home/adam/builds/manim && python3 -m manim $kak_buffile  -pl }"<left><left><left><left><left><left><left>'

# filetype specific
# TeX
hook global WinSetOption filetype=latex %{ 
	map global user e 'i\begin{}<esc>xypjxsbegin<ret>cend<esc>K<a-x>s\{<ret>a' #}
	map global user c ':w<ret>:terminal latexmk -pdf -nobibtex %val{buffile}<ret>'
	map global user k ':terminal zathura %sh{ echo $kak_buffile | sed "s|\..\{1,4\}$|.pdf|" }<ret>' -docstring "Preview pdf in the current folder" #{
	map global user f 'a}<a-;>i\textbf{<esc><esc><esc>' #}{
	map global user i 'a}<a-;>i\textit{<esc><esc><esc>' #}
}



# Plugins
# initialization of plug.kak
source "%val{config}/plugins/plug.kak/rc/plug.kak"

# kak-crosshairs
# plug "https://github.com/andreyorst/kak-crosshairs"

# kakoune-lf
plug "https://github.com/TeddyDD/kakoune-lf" config %{
    map global user l ':lf<ret>'
    declare-option -docstring %{shell command run to spawn a new terminal} str termcmd 'st -e bash -c'
}

# kakoune-snippets
plug "https://github.com/occivink/kakoune-snippets" config %{
	set-option global snippets_directories "%opt{plug_install_dir}/kakoune-snippet-collection/snippets"
	set-option global snippets_auto_expand false
	map global insert '§' "z<a-;>: snippets-expand-or-jump 'tab'<ret>"
	map global normal '§' ": snippets-select-next-placeholders<ret>"
	alias global as snippets-add-snippet
	alias global sr snippets-directory-reload

	hook global InsertCompletionShow .* %{
		try %{
			execute-keys -draft 'h<a-K>\h<ret>'
			map window insert '<ret>' "z<a-;>: snippets-expand-or-jump 'ret'<ret>"
		}
	}

	hook global InsertCompletionHide .* %{
		unmap window insert '<ret>' "z<a-;>: snippets-expand-or-jump 'ret'<ret>"
	}

	define-command snippets-expand-or-jump -params 1 %{
	execute-keys <backspace>
	try %{
		snippets-expand-trigger %{
		set-register / "%opt{snippets_triggers_regex}\z"
		execute-keys 'hGhs<ret>'
	}
	} catch %{
		snippets-select-next-placeholders
	} catch %sh{
		case $1 in
		ret|tab)
			printf "%s\n" "execute-keys -with-hooks <$1>" ;;
		*)
			printf "%s\n" "execute-keys -with-hooks $1" ;;
		esac
		}
	}
}

# snippet collection
plug "andreyorst/kakoune-snippet-collection"

# powerline
plug "https://github.com/andreyorst/powerline.kak" config %{
	hook -once global WinCreate .* %{
		powerline-format bufname filetype mode_info line_column position
	}
}

# buffers
plug "https://github.com/Delapouite/kakoune-buffers" config %{
	hook global WinDisplay .* info-buffers
	# Suggested mappings
	map global user b ':enter-buffers-mode<ret>'              -docstring 'buffers…'
	map global user B ':enter-user-mode -lock buffers<ret>'   -docstring 'buffers (lock)…'
	# Suggested aliases

	alias global bd delete-buffer
	alias global bf buffer-first
	alias global bl buffer-last
	alias global bo buffer-only
	alias global bo! buffer-only-force
}

# fzf
plug "https://github.com/andreyorst/fzf.kak" config %{
	map -docstring 'fzf mode' global user 'f' ': fzf-mode<ret>'
	set-option global fzf_preview_width '65%'
	evaluate-commands %sh{
		if [ -n "$(command -v fd)" ]; then
			echo "set-option global fzf_file_command %{fd . --color=always --no-ignore --type f --follow --hidden --exclude .git --exclude .svn}"
		else
			echo "set-option global fzf_file_command %{find . \( -path '*/.svn*' -o -path '*/.git*' \) -prune -o -type f -follow -print}"
		fi
		[ -n "$(command -v bat)" ] && echo "set-option global fzf_highlighter bat"
		[ -n "$(command -v rg)" ] && echo "set-option global fzf_sk_grep_command %{$kak_opt_grepcmd}"
	}
}


# surround
plug "https://github.com/h-youhei/kakoune-surround" config %{
	declare-user-mode surround
	map global user 's' ':enter-user-mode surround<ret>'
	map global surround s ':surround<ret>' -docstring 'surround'
	map global surround c ':change-surround<ret>' -docstring 'change'
	map global surround d ':delete-surround<ret>' -docstring 'delete'
	map global surround t ':select-surrounding-tag<ret>' -docstring 'select tag'
}

# find
plug "https://github.com/occivink/kakoune-find"
# TODO

# tagbar.kak
plug "https://github.com/andreyorst/tagbar.kak"

# kak-lsp
hook global KakBegin .* %{
	eval %sh{kak-lsp --kakoune -s $kak_session}
	lsp-enable
}

# kakoune-phantom-selection
plug "https://github.com/occivink/kakoune-phantom-selection" config %{
	map global user n     ": phantom-sel-add-selection<ret>"
	map global user N     ": phantom-sel-select-all; phantom-sel-clear<ret>"
	map global user <a-n> ": phantom-sel-iterate-next<ret>"
	map global user <a-N> ": phantom-sel-iterate-prev<ret>"
}

# options
set-option global scrolloff 7,7

set global tabstop 4
set global indentwidth 0

# highlighters
hook global WinCreate .* %{
	add-highlighter window/numbers          number-lines -relative -hlcursor
	add-highlighter window/matching         show-matching
	add-highlighter window/wrap             wrap -word -indent -marker '↪'
	add-highlighter window/show-whitespaces show-whitespaces -tab "▏" -lf " " -nbsp "⋅" -spc " "
	add-highlighter window/operators        regex (\+|-|\*|&|=|\\|\?|%|\|-|!|\||->|\.|,|<|>|:|\^|/|~) 0:operator
	add-highlighter window/delimiters       regex (\(|\)|\[|\]|\{|\}|\;|') 0:delimiters
	face global PrimaryCursorEol red,red
	face global SecondaryCursorEol red,red
}
# ----------

def suspend-and-resume \
-params 1..2 \
-docstring 'suspend-and-resume <cli command> [<kak command after resume>]: backgrounds current kakoune client and runs specified cli command.  Upon exit of command the optional kak command is executed.' \
    %{ evaluate-commands %sh{

# Note we are adding '&& fg' which resumes the kakoune client process after the cli command exits
cli_cmd="$1 && fg"
post_resume_cmd="$2"

# automation is different platform to platform
platform=$(uname -s)
case $platform in
	Darwin)
	automate_cmd="sleep 0.01; osascript -e 'tell application \"System Events\" to keystroke \"$cli_cmd\\n\" '"
	kill_cmd="/bin/kill"
	break
	;;
	Linux)
	automate_cmd="sleep 0.2; xdotool type '$cli_cmd'; xdotool key Return"
	kill_cmd="/usr/bin/kill"
	break
	;;
esac

# Uses platforms automation to schedule the typing of our cli command
nohup sh -c "$automate_cmd"  > /dev/null 2>&1 &
# Send kakoune client to the background
$kill_cmd -SIGTSTP $kak_client_pid

# ...At this point the kakoune client is paused until the " && fg " gets run in the $automate_cmd

# Upon resume, run the kak command is specified
if [ ! -z "$post_resume_cmd" ]; then
	echo "$post_resume_cmd"
fi
}}

def tig-blame -override -docstring 'Open blame in tig for current file and line' %{
Note here we aren't passing any command on resume of kakoune
suspend-and-resume "tig blame +%val{cursor_line} %val{buffile}"
}

declare-user-mode tig
map global tig b ': tig-blame<ret>' -docstring 'show blame (with tig)'
map global tig s ': suspend-and-resume "tig status"<ret>' -docstring 'show git status (with tig)'
map global tig m ': suspend-and-resume "tig"<ret>' -docstring 'show main view (with tig)'

map global user t ': enter-user-mode tig<ret>' -docstring 'tig commands'
