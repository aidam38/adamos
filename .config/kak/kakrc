# Adam Křivka (aidam38) kakrc
# 
# initialization of plug.kak
source "%val{config}/plugins/plug.kak/rc/plug.kak"

# basic key bindings
map global normal ů :
map global normal ú /
map global normal <space> ,
map global user <space> <space>
map global normal X <a-x>
map global normal '#' :comment-line<ret>
map global normal R ":source ~/.config/kak/kakrc<ret>"
map global normal <a-space> "/<lt>\+\+<gt><ret>c"
map global insert <a-space> "<esc>/<lt>\+\+<gt><ret>c"

# clipboard managment
hook global NormalKey y|d|c %{ nop %sh{
      printf %s "$kak_main_reg_dquote" | xsel --input --clipboard
}}

map global user p '<a-!>xsel --output --clipboard<ret>'
map global user P '!xsel --output --clipboard<ret>'

map global user C ':w<ret>:terminal compile %val{buffile}<ret>'

# temporary binds
# map global user C ':exec ":nop %sh{ cd /home/adam/builds/manim && python3 -m manim $kak_buffile  -pl }"<left><left><left><left><left><left><left>'

# filetype specific
# TeX
hook global WinSetOption filetype=latex %{ 
	map global user e 'i\begin{}<esc>xypjxsbegin<ret>cend<esc>K<a-x>s\{<ret>a' #}
	map global user c ':w<ret>:terminal latexmk -pdf -nobibtex %val{buffile}<ret>'
	map global user k ':terminal zathura %sh{ echo $kak_buffile | sed "s|\..\{1,4\}$|.pdf|" }<ret>' -docstring "Preview pdf in the current folder" #{
	map global user f 'a}<a-;>i\textbf{<esc><esc><esc>' #}{
	map global user i 'a}<a-;>i\textit{<esc><esc><esc>' #}
}


# options
set global tabstop 4
set global indentwidth 0

# tagbar
# plugg "https://github.com/andreyorst/tagbar.kak"

# kakoune-lf
plug "https://github.com/TeddyDD/kakoune-lf"
map global user l ':lf<ret>'
declare-option -docstring %{shell command run to spawn a new terminal} str termcmd 'st -e bash -c'

# snippets
plug "https://github.com/occivink/kakoune-snippets" config %{
	set-option global snippets_auto_expand false
	map global insert <a-i> '<esc>b:snippets-expand-trigger<ret>'
	set global snippets 	usepackage 	"us" 	"exec i\usepackage{}<esc>hi"\
							section 	"sec"	"exec i\section{}<esc>hi"\
							frac		"fr"	"exec i\frac{}{}<esc>hhhi"\
							uv			"uv"	"exec i\uv{}<esc>hi"\
							in			"in" 	"exec i\includegraphics[0.<lt>++<gt>\textwidth]{<lt>++<gt>}<esc><a-b>"
}

# powerline
plug "https://github.com/andreyorst/powerline.kak"

# buffers
plug "https://github.com/Delapouite/kakoune-buffers"
map global user b ':enter-buffers-mode<ret>'              -docstring 'buffers…'
map global user B ':enter-user-mode -lock buffers<ret>'   -docstring 'buffers (lock)…'
map global user <tab> '<space>ba'

# surround
plug "https://github.com/h-youhei/kakoune-surround"
# TODO

# find
plug "https://github.com/occivink/kakoune-find"
# TODO

# kak-lsp
eval %sh{kak-lsp --kakoune -s $kak_session}
lsp-enable

# highlighters
add-highlighter global/ number-lines
add-highlighter global/ wrap -indent
add-highlighter global/ show-whitespaces -tab "▏" -lf " " -nbsp "⋅" -spc " "
# ----------

def suspend-and-resume \
-params 1..2 \
-docstring 'suspend-and-resume <cli command> [<kak command after resume>]: backgrounds current kakoune client and runs specified cli command.  Upon exit of command the optional kak command is executed.' \
    %{ evaluate-commands %sh{

# Note we are adding '&& fg' which resumes the kakoune client process after the cli command exits
cli_cmd="$1 && fg"
post_resume_cmd="$2"

# automation is different platform to platform
platform=$(uname -s)
case $platform in
	Darwin)
	automate_cmd="sleep 0.01; osascript -e 'tell application \"System Events\" to keystroke \"$cli_cmd\\n\" '"
	kill_cmd="/bin/kill"
	break
	;;
	Linux)
	automate_cmd="sleep 0.2; xdotool type '$cli_cmd'; xdotool key Return"
	kill_cmd="/usr/bin/kill"
	break
	;;
esac

# Uses platforms automation to schedule the typing of our cli command
nohup sh -c "$automate_cmd"  > /dev/null 2>&1 &
# Send kakoune client to the background
$kill_cmd -SIGTSTP $kak_client_pid

# ...At this point the kakoune client is paused until the " && fg " gets run in the $automate_cmd

# Upon resume, run the kak command is specified
if [ ! -z "$post_resume_cmd" ]; then
	echo "$post_resume_cmd"
fi
}}

def tig-blame -override -docstring 'Open blame in tig for current file and line' %{
Note here we aren't passing any command on resume of kakoune
suspend-and-resume "tig blame +%val{cursor_line} %val{buffile}"
}

declare-user-mode tig
map global tig b ': tig-blame<ret>' -docstring 'show blame (with tig)'
map global tig s ': suspend-and-resume "tig status"<ret>' -docstring 'show git status (with tig)'
map global tig m ': suspend-and-resume "tig"<ret>' -docstring 'show main view (with tig)'

map global user t ': enter-user-mode tig<ret>' -docstring 'tig commands'
